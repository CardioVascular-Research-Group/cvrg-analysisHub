package edu.jhu.cvrg.analysis.wrapper.wfdb;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import edu.jhu.cvrg.analysis.util.AnalysisUtils;
import edu.jhu.cvrg.analysis.vo.AnalysisVO;
import edu.jhu.cvrg.analysis.wrapper.AnnotationBasedAnalysisWrapper;

public class NguessAnalysis extends AnnotationBasedAnalysisWrapper {

	private String annotator; 
	private int startTime = 0;
	private int endTime = 0;
	private double 	qInterval = 0.0;
	
	private String path;
	private String inputFilename;
	private String outputFilename = null;
	
	public NguessAnalysis(AnalysisVO vo) {
		super(vo);
	}

	@Override
	protected void processReturnLine(String line) {
	}

	@Override
	public void defineInputParameters() {
		//*** The analysis algorithm should return a String array containing the full path/names of the result files.
		String annotationFileName = AnalysisUtils.findPathNameExt(this.getAnalysisVO().getFileNames(), ".atr.qrs");
		annotator = annotationFileName.substring(annotationFileName.lastIndexOf('.')+1);
		
		
		if(this.getAnalysisVO().getCommandParamMap().get("f") != null){
			startTime	= Integer.parseInt( (String) this.getAnalysisVO().getCommandParamMap().get("f"));    // -f
		}
		
		
		if(this.getAnalysisVO().getCommandParamMap().get("t") != null){
			endTime = Integer.parseInt( (String) this.getAnalysisVO().getCommandParamMap().get("t"));    // -t (-1) defaults to end of record.
		}
		 	
		if( this.getAnalysisVO().getCommandParamMap().get("f") != null){
			qInterval	= Double.parseDouble( (String) this.getAnalysisVO().getCommandParamMap().get("f"));    // -f	
		}
		
		path = AnalysisUtils.extractPath(this.getAnalysisVO().getFileNames().get(0));
		inputFilename = AnalysisUtils.extractName(this.getAnalysisVO().getFileNames().get(0));
		
		debugPrintln("- sInputPath: " + path);
		debugPrintln("- sInputName: " + inputFilename);
		
		
		if( this.getAnalysisVO().getCommandParamMap().get("o") != null){
			outputFilename = (String) this.getAnalysisVO().getCommandParamMap().get("o"); // -o  // In this case, this variable defines the extension, not the filename
		}else{
			int index = inputFilename.lastIndexOf(".");
			outputFilename = inputFilename.substring(0, index);
		}
		
		outputFilename = outputFilename + '_' + this.getAnalysisVO().getJobIdNumber(); 
		
	}

	@Override
	public void execute() {
		boolean bRet = true;
		debugPrintln("nguess()");
		debugPrintln("- sInputFile:" + inputFilename);
		debugPrintln("- sPath:" + path);
		debugPrintln("- bAnnotator:" + annotator);
		debugPrintln("- bStartTime:" + startTime);  		
		debugPrintln("- dQInterval:" + qInterval);
		debugPrintln("- iRate:" + endTime);
		debugPrintln("- sOutputName:" + outputFilename);
		
		try {
		
			String[] asEnvVar = new String[0];  
			
			// build command string
			int iIndexPeriod = inputFilename.lastIndexOf(".");
			String sRecord = inputFilename.substring(0, iIndexPeriod);
			
			//sOutputFile = sRecord;
			
			String sCommand = "nguess -r " + path + sRecord; // record name
			
			sCommand += " -a " + annotator;
			if(startTime > 0) sCommand += " -f " + startTime;
	
			if(qInterval > 0) {
				sCommand += " -m " + qInterval;	
			}
	
			if(endTime > 0) sCommand += " -t " + endTime;
			
			bRet = executeCommand(sCommand, asEnvVar, WORKING_DIR);
			
			bRet &= stdErrorHandler();
			
			if(bRet){
				switch (this.getAnalysisVO().getResultType()) {
				case ORIGINAL_FILE:
					stdReturnHandler();
					String outputFile = path + outputFilename + ".nguess";
					new File(path + sRecord+".nguess").renameTo(new File(path + outputFilename + ".nguess"));
					
					//set first output file to output generated by the sigamp command
					List<String> outputFilenames = new ArrayList<String>();
					debugPrintln("- sOutputName:" + outputFile);
					outputFilenames.add(outputFile);
					
					this.getAnalysisVO().setOutputFileNames(outputFilenames);	
					break;
				default:
					bRet = false;
					debugPrintln("This analysis does not support the selected output format.");
					break;
				}
				
			}else{
				debugPrintln("- Encountered errors.");
			}			
		
		} catch (Exception e) {
			bRet = false;
			log.error(e.getMessage());
		}
		
		this.getAnalysisVO().setSucess(bRet);

	}

}
