package edu.jhu.cvrg.analysis.wrapper.wfdb;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import edu.jhu.cvrg.analysis.util.AnalysisExecutionException;
import edu.jhu.cvrg.analysis.util.AnalysisParameterException;
import edu.jhu.cvrg.analysis.util.AnalysisUtils;
import edu.jhu.cvrg.analysis.vo.AnalysisVO;
import edu.jhu.cvrg.analysis.wrapper.AnnotationBasedAnalysisWrapper;

public class NguessAnalysis extends AnnotationBasedAnalysisWrapper {

	private String annotator; 
	private int startTime = 0;
	private int endTime = 0;
	private double 	qInterval = 0.0;
	
	private String path;
	private String inputFilename;
	private String outputFilename = null;
	
	public NguessAnalysis(AnalysisVO vo) throws AnalysisParameterException, AnalysisExecutionException {
		super(vo);
	}

	@Override
	protected void processReturnLine(String line) {
	}

	@Override
	protected void _defineInputParameters() throws AnalysisParameterException {
		
		String annotationFileName = AnalysisUtils.findPathNameExt(this.getAnalysisVO().getFileNames(), ".atr.qrs");
		annotator = annotationFileName.substring(annotationFileName.lastIndexOf('.')+1);
		
		path = AnalysisUtils.extractPath(this.getAnalysisVO().getFileNames().get(0));
		inputFilename = AnalysisUtils.extractName(this.getAnalysisVO().getFileNames().get(0));
		
		int index = inputFilename.lastIndexOf(".");
		outputFilename = inputFilename.substring(0, index);
		
		if(this.getAnalysisVO().getCommandParamMap() != null && !this.getAnalysisVO().getCommandParamMap().isEmpty()){
			if(this.getAnalysisVO().getCommandParamMap().get("f") != null){
				startTime	= Integer.parseInt( (String) this.getAnalysisVO().getCommandParamMap().get("f"));    // -f
			}
			
			if(this.getAnalysisVO().getCommandParamMap().get("t") != null){
				endTime = Integer.parseInt( (String) this.getAnalysisVO().getCommandParamMap().get("t"));    // -t (-1) defaults to end of record.
			}
			 	
			if( this.getAnalysisVO().getCommandParamMap().get("f") != null){
				qInterval	= Double.parseDouble( (String) this.getAnalysisVO().getCommandParamMap().get("f"));    // -f	
			}
			
			if( this.getAnalysisVO().getCommandParamMap().get("o") != null){
				outputFilename = (String) this.getAnalysisVO().getCommandParamMap().get("o"); // -o  // In this case, this variable defines the extension, not the filename
			}
		}
		
		debugPrintln("- path: " + path);
		debugPrintln("- inputFilename: " + inputFilename);
		
		outputFilename = outputFilename + '_' + this.getAnalysisVO().getJobIdNumber(); 
		
	}

	@Override
	protected void _execute() throws AnalysisExecutionException {
		boolean bRet = true;
		debugPrintln("nguess()");
		debugPrintln("- inputFilename:" + inputFilename);
		debugPrintln("- path:" + path);
		debugPrintln("- annotator:" + annotator);
		debugPrintln("- startTime:" + startTime);  		
		debugPrintln("- qInterval:" + qInterval);
		debugPrintln("- endTime:" + endTime);
		debugPrintln("- outputFilename:" + outputFilename);
	
		String[] envVar = new String[0];  
		
		// build command string
		int index = inputFilename.lastIndexOf(".");
		String record = inputFilename.substring(0, index);
		
		//sOutputFile = sRecord;
		
		String command = "nguess -r " + path + record; // record name
		
		command += " -a " + annotator;
		if(startTime > 0) command += " -f " + startTime;

		if(qInterval > 0) {
			command += " -m " + qInterval;	
		}

		if(endTime > 0) command += " -t " + endTime;
		
		try {
				
			bRet = executeCommand(command, envVar, WORKING_DIR);
			bRet &= stdErrorHandler();
			
			if(bRet){
				switch (this.getAnalysisVO().getResultType()) {
				case ORIGINAL_FILE:
					stdReturnHandler();
					String outputFile = path + outputFilename + ".nguess";
					new File(path + record + ".nguess").renameTo(new File(path + outputFilename + ".nguess"));
					
					//set first output file to output generated by the sigamp command
					List<String> outputFilenames = new ArrayList<String>();
					debugPrintln("- outputFile:" + outputFile);
					outputFilenames.add(outputFile);
					
					this.getAnalysisVO().setOutputFileNames(outputFilenames);	
					break;
				default:
					throw new AnalysisExecutionException("Unexpected output format ["+this.getAnalysisVO().getResultType()+"] for this analysis ["+this.getAnalysisVO().getType()+"]");
				}
				
			}else{
				throw new AnalysisExecutionException("Command execution error. ["+ command+"]");
			}			
		
		} catch (IOException e) {
			throw new AnalysisExecutionException("Error on "+this.getAnalysisVO().getType()+" command output handling", e);
		}
		
		this.getAnalysisVO().setSucess(bRet);
	}

}
